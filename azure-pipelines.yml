# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'TODO-CHANGE-TO-PIPELINE-VARIABLE'

  # Function app name - temporary name, also used in basic.bicep.
  functionAppName: 'FunctionApp-a7d6f5h38a'

  # Agent VM image name
  vmImageName: 'windows-latest'

  # Working Directory
  workingDirectory: 'FunctionApp'

stages:
- stage: DeployResources
  displayName: Deploy Resources Stage

  jobs:
  - job: DeployResources
    displayName: Deploy Resources
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: AzureCLI@2
      displayName: Task AzureCLI
      inputs:
       azureSubscription: $(azureSubscription)
       scriptType: ps
       scriptLocation: scriptPath
       scriptPath: '$(Build.SourcesDirectory)/deploy/deploy.ps1'
       useGlobalConfig: false

- stage: Build
  displayName: Build Stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy Stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@2
            displayName: 'Azure functions app deploy'
            inputs:
              connectedServiceNameARM: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'